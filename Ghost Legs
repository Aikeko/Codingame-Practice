# https://www.codingame.com/ide/puzzle/ghost-legs

# Ghost Legs is a kind of lottery game common in Asia. It starts with a number of vertical lines. Between the lines there are random horizontal connectors binding all lines into a connected diagram, like the one below.

# A  B  C
# |  |  |
# |--|  |
# |  |--|
# |  |--|
# |  |  |
# 1  2  3

# To play the game, a player chooses a line in the top and follow it downwards. When a horizontal connector is encountered, he must follow the connector to turn to another vertical line and continue downwards. Repeat this until reaching the bottom of the diagram.

# In the example diagram, when you start from A, you will end up in 2. Starting from B will end up in 1. Starting from C will end up in 3. It is guaranteed that every top label will map to a unique bottom label.

# Given a Ghost Legs diagram, find out which top label is connected with which bottom label. List all connected pairs.


import sys
import math

w, h = (7, 7)
diagram = ['A  B  C', '|  |  |', '|--|  |', '|  |--|', '|  |--|', '|  |  |', '1  2  3']

top = diagram[0].split()
bottom = diagram[-1].split()

def getTurns(top = [], h = int, diagram = []):
    #print('getTurns start')
    turns = []
    paths = [diagram[i].split('|') for i in range(1, h-1)]
    for path in paths:
        turn = [j-1 if path[j] == '--' else -1 for j in range(1, len(path)-1)]
        turns.append(turn)
        
    return turns

def getDirections(paths): #Returns a nested list - each line is a list with directions where tuple is a connection and False is no connection
    result = []
    for path in paths:
        directions = []
        for i, step in enumerate(path):
            if step > -1:
                direction = (i, i+1)
            else:
                direction = False
            directions.append(direction)
        result.append(directions)
        
    return result
    
    
directions = getDirections(getTurns(top, h, diagram))

for i, label in enumerate(top):
    temp = i
    
    for row in directions:
        for turn in row:
            if turn == (temp-1, temp):
                temp -= 1
                break
            if turn == (temp, temp+1):
                temp += 1
                break
        
    try:
        result = label + bottom[temp]
    except:
        result = label + bottom[i]
    
    print(result)
